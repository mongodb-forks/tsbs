// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package mongo

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MongoFloat32Tag struct {
	_tab flatbuffers.Table
}

func GetRootAsMongoFloat32Tag(buf []byte, offset flatbuffers.UOffsetT) *MongoFloat32Tag {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MongoFloat32Tag{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMongoFloat32Tag(buf []byte, offset flatbuffers.UOffsetT) *MongoFloat32Tag {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MongoFloat32Tag{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MongoFloat32Tag) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MongoFloat32Tag) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MongoFloat32Tag) Value() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *MongoFloat32Tag) MutateValue(n float32) bool {
	return rcv._tab.MutateFloat32Slot(4, n)
}

func MongoFloat32TagStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func MongoFloat32TagAddValue(builder *flatbuffers.Builder, value float32) {
	builder.PrependFloat32Slot(0, value, 0.0)
}
func MongoFloat32TagEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
